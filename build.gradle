plugins {
    id 'org.springframework.boot' version '2.2.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'maven-publish'
    id "jacoco"
    id 'nebula.lint' version '16.8.1'
    id "org.sonarqube" version "2.8"
    id "com.github.sherter.google-java-format" version "0.8"
}

group 'com.kafka.starter'
version '1.0'

java {
    sourceCompatibility = JavaVersion.VERSION_13
    targetCompatibility = JavaVersion.VERSION_13
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    jcenter()
}

ext {
    lombokVersion = "1.18.8"
    commonsLangVersion="3.9"
    kafkaVersion="2.3.5.RELEASE"
    mockitoVersion="1.10.19"
    jacksonVersion="2.10.3"
    testcontainersVersion = "1.14.1"
}

dependencies {

    compile "org.springframework.boot:spring-boot-starter"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.apache.commons:commons-lang3:${commonsLangVersion}"
    compile "org.springframework.kafka:spring-kafka:${kafkaVersion}"
    compile "org.projectlombok:lombok:${lombokVersion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    compile group: 'org.apache.avro', name: 'avro', version: '1.9.2'
    compile group: 'tech.allegro.schema.json2avro', name: 'converter', version: '0.2.9'

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testCompile "org.testcontainers:testcontainers:${testcontainersVersion}"
    testCompile "org.testcontainers:kafka:${testcontainersVersion}"
    testCompile "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testCompile "org.mockito:mockito-all:${mockitoVersion}"
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
}

verifyGoogleJavaFormat.dependsOn "googleJavaFormat"

gradleLint.rules = ['unused-dependency']

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
}

jar {
    enabled = true
}
bootJar {
    mainClassName = 'com.consumer.starter.EventConsumerSpringBootStarterApplication'
    classifier = 'application'
}

/* Publish to nexus
/*publishing {
    publications {
        pluginPublication(MavenPublication) {
            from components.java
            groupId project.group
            artifactId "event-consumer-spring-boot-starter"
            version project.version
        }
    }
    repositories {
        mavenLocal()
        maven {
            credentials {
                username "${nexusUser}" // set on gradle.properties
                password "${nexusPassword}"
            }
            url "${nexusUrl}"
        }
    }
}*/

/**
 * Autogenerated by Avro
 *
 * <p>DO NOT EDIT DIRECTLY
 */
package com.consumer.starter.domain;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EventTestDomain extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1476755637734331116L;
  public static final org.apache.avro.Schema SCHEMA$ =
      new org.apache.avro.Schema.Parser()
          .parse(
              "{\"type\":\"record\",\"name\":\"EventTestDomain\",\"namespace\":\"com.consumer.starter.eventconsumer.domain\",\"fields\":[{\"name\":\"username\",\"type\":\"string\",\"doc\":\"Name of the user account on Twitter.com\"},{\"name\":\"tweet\",\"type\":\"string\",\"doc\":\"The content of the user's Twitter message\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Unix epoch time in seconds\"}],\"doc:\":\"A basic schema for storing Twitter messages\"}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EventTestDomain> ENCODER =
      new BinaryMessageEncoder<EventTestDomain>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EventTestDomain> DECODER =
      new BinaryMessageDecoder<EventTestDomain>(MODEL$, SCHEMA$);

  /** Return the BinaryMessageDecoder instance used by this class. */
  public static BinaryMessageDecoder<EventTestDomain> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link
   * SchemaStore}.
   *
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EventTestDomain> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EventTestDomain>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EventTestDomain to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EventTestDomain from a ByteBuffer. */
  public static EventTestDomain fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Name of the user account on Twitter.com */
  @Deprecated public java.lang.CharSequence username;
  /** The content of the user's Twitter message */
  @Deprecated public java.lang.CharSequence tweet;
  /** Unix epoch time in seconds */
  @Deprecated public long timestamp;

  /**
   * Default constructor. Note that this does not initialize fields to their default values from the
   * schema. If that is desired then one should use <code>newBuilder()</code>.
   */
  public EventTestDomain() {}

  /**
   * All-args constructor.
   *
   * @param username Name of the user account on Twitter.com
   * @param tweet The content of the user's Twitter message
   * @param timestamp Unix epoch time in seconds
   */
  public EventTestDomain(
      java.lang.CharSequence username, java.lang.CharSequence tweet, java.lang.Long timestamp) {
    this.username = username;
    this.tweet = tweet;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return username;
      case 1:
        return tweet;
      case 2:
        return timestamp;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        username = (java.lang.CharSequence) value$;
        break;
      case 1:
        tweet = (java.lang.CharSequence) value$;
        break;
      case 2:
        timestamp = (java.lang.Long) value$;
        break;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'username' field.
   *
   * @return Name of the user account on Twitter.com
   */
  public java.lang.CharSequence getUsername() {
    return username;
  }

  /**
   * Sets the value of the 'username' field. Name of the user account on Twitter.com
   *
   * @param value the value to set.
   */
  public void setUsername(java.lang.CharSequence value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'tweet' field.
   *
   * @return The content of the user's Twitter message
   */
  public java.lang.CharSequence getTweet() {
    return tweet;
  }

  /**
   * Sets the value of the 'tweet' field. The content of the user's Twitter message
   *
   * @param value the value to set.
   */
  public void setTweet(java.lang.CharSequence value) {
    this.tweet = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   *
   * @return Unix epoch time in seconds
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field. Unix epoch time in seconds
   *
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Creates a new EventTestDomain RecordBuilder.
   *
   * @return A new EventTestDomain RecordBuilder
   */
  public static EventTestDomain.Builder newBuilder() {
    return new EventTestDomain.Builder();
  }

  /**
   * Creates a new EventTestDomain RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new EventTestDomain RecordBuilder
   */
  public static EventTestDomain.Builder newBuilder(EventTestDomain.Builder other) {
    return new EventTestDomain.Builder(other);
  }

  /**
   * Creates a new EventTestDomain RecordBuilder by copying an existing EventTestDomain instance.
   *
   * @param other The existing instance to copy.
   * @return A new EventTestDomain RecordBuilder
   */
  public static EventTestDomain.Builder newBuilder(EventTestDomain other) {
    return new EventTestDomain.Builder(other);
  }

  /** RecordBuilder for EventTestDomain instances. */
  public static class Builder
      extends org.apache.avro.specific.SpecificRecordBuilderBase<EventTestDomain>
      implements org.apache.avro.data.RecordBuilder<EventTestDomain> {

    /** Name of the user account on Twitter.com */
    private java.lang.CharSequence username;
    /** The content of the user's Twitter message */
    private java.lang.CharSequence tweet;
    /** Unix epoch time in seconds */
    private long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(EventTestDomain.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.username)) {
        this.username = data().deepCopy(fields()[0].schema(), other.username);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tweet)) {
        this.tweet = data().deepCopy(fields()[1].schema(), other.tweet);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EventTestDomain instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(EventTestDomain other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.username)) {
        this.username = data().deepCopy(fields()[0].schema(), other.username);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tweet)) {
        this.tweet = data().deepCopy(fields()[1].schema(), other.tweet);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Gets the value of the 'username' field. Name of the user account on Twitter.com
     *
     * @return The value.
     */
    public java.lang.CharSequence getUsername() {
      return username;
    }

    /**
     * Sets the value of the 'username' field. Name of the user account on Twitter.com
     *
     * @param value The value of 'username'.
     * @return This builder.
     */
    public EventTestDomain.Builder setUsername(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.username = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'username' field has been set. Name of the user account on Twitter.com
     *
     * @return True if the 'username' field has been set, false otherwise.
     */
    public boolean hasUsername() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'username' field. Name of the user account on Twitter.com
     *
     * @return This builder.
     */
    public EventTestDomain.Builder clearUsername() {
      username = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'tweet' field. The content of the user's Twitter message
     *
     * @return The value.
     */
    public java.lang.CharSequence getTweet() {
      return tweet;
    }

    /**
     * Sets the value of the 'tweet' field. The content of the user's Twitter message
     *
     * @param value The value of 'tweet'.
     * @return This builder.
     */
    public EventTestDomain.Builder setTweet(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.tweet = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'tweet' field has been set. The content of the user's Twitter message
     *
     * @return True if the 'tweet' field has been set, false otherwise.
     */
    public boolean hasTweet() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'tweet' field. The content of the user's Twitter message
     *
     * @return This builder.
     */
    public EventTestDomain.Builder clearTweet() {
      tweet = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'timestamp' field. Unix epoch time in seconds
     *
     * @return The value.
     */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
     * Sets the value of the 'timestamp' field. Unix epoch time in seconds
     *
     * @param value The value of 'timestamp'.
     * @return This builder.
     */
    public EventTestDomain.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'timestamp' field has been set. Unix epoch time in seconds
     *
     * @return True if the 'timestamp' field has been set, false otherwise.
     */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }

    /**
     * Clears the value of the 'timestamp' field. Unix epoch time in seconds
     *
     * @return This builder.
     */
    public EventTestDomain.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EventTestDomain build() {
      try {
        EventTestDomain record = new EventTestDomain();
        record.username =
            fieldSetFlags()[0] ? this.username : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.tweet =
            fieldSetFlags()[1] ? this.tweet : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.timestamp =
            fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EventTestDomain> WRITER$ =
      (org.apache.avro.io.DatumWriter<EventTestDomain>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EventTestDomain> READER$ =
      (org.apache.avro.io.DatumReader<EventTestDomain>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }
}
